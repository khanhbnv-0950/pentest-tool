#!/usr/bin/python3

import argparse
import requests
from urllib.parse import urlparse
from colored import fg, bg, attr
import requests
import urllib3
urllib3.disable_warnings()

DEBUG = False

def init_args():
    parse = argparse.ArgumentParser(description='CORS Checker')
    parse.add_argument('-u', metavar='domain', help='Domain check CORS')
    parse.add_argument('-i', metavar='list-url', help='List domain check CORS')
    parse.add_argument('-x', metavar='method', default='get', help='Method check CORS')
    parse.add_argument('-c', metavar='cookies', help='Add cookies')
    return parse.parse_args()

def create_origin(domain=''):
    url_struc = urlparse(domain)
    if not url_struc.netloc:
        return ''

    if not url_struc.scheme:
        scheme = 'http'
    else:
        scheme = url_struc.scheme
    # url_padding = [
    #     'evil',
    #     'evil-',
    #     '.evil'
    # ]
    root = url_struc.netloc.split('.')
    root = root[-2]+'.'+root[-1]
    list_origin = []
    list_origin.append('null')
    list_origin.append(scheme+'://'+'evil'+root)
    list_origin.append(scheme+'://'+'evil-'+root)
    list_origin.append(scheme+'://'+root+'evil')
    list_origin.append(scheme+'://'+root+'-evil')
    list_origin.append(scheme+'://'+root+'.evil')
    # for padding in url_padding:
    #     list_origin.append(scheme+'://'+padding+root)
    #     list_origin.append(scheme+'://'+root+padding)
    return list_origin

def check_cors(domain='', method=[], cookies_in=''):
    list_origin = create_origin(domain)
    proxies = {
        'http': 'http://127.0.0.1:8080',
        'https': 'https://127.0.0.1:8080'
    }
    cookies = {}
    cookies_in = cookies_in.split(';')
    for cookie in cookies_in:
        if cookie:
            print(cookie)
            i = cookie.index('=')
            cookies[cookie[:i]] = cookie[i+1:]
    print(fg(33)+'[*] Check CORS Domain: '+fg(222)+domain+attr('reset'))
    for m in method:
        for origin in list_origin:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0',
                'Origin': origin
            }
            if m.upper() == 'GET':
                if DEBUG:
                    resp = requests.get(domain, headers=headers, proxies=proxies, cookies=cookies, verify=False)
                else:
                    resp = requests.get(domain, headers=headers, proxies=proxies, cookies=cookies, verify=False)
                if 'Access-Control-Allow-Origin' in resp.headers.keys():
                    print(f'   {fg("violet")}|->{attr("reset")} Method: {fg(82)+m.upper()+attr("reset")} - Origin: {fg("red")+origin+attr("reset")}')
            # elif m.upper() == 'POST':
            #     resp = requests.post()
            # elif m.upper() == 'PUT':
            #     resp = requests.put()
            # elif m.upper() == 'DELETE':
            #     resp = requests.delete()


def main():
    args = init_args()
    if not isinstance(args.x, list):
        args.x = [args.x]
    if args.u:
        check_cors(args.u, args.x, args.c)

if __name__ == '__main__':
    main()