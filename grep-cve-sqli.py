#!/usr/bin/python3

import sys
import os
import argparse
import re
from colored import fg, bg, attr

result = []
DEBUG = False

def init_argument():
    parser = argparse.ArgumentParser(prog='How to find bug?',usage='how to usage', description='description')
    parser.add_argument('-i', metavar='input file result')
    parser.add_argument('-d', '--input-folder',metavar='input folder recursive', required=True, dest='d')
    parser.add_argument('-e', metavar='include extension')
    parser.add_argument('-ne', metavar='exclude extension')
    parser.add_argument('-o', metavar='output result', default='sqli_out_raw.txt')
    parser.add_argument('--debug', metavar='Debug')
    return parser.parse_args()


def output_color(path_file='', string='', index_point=[]):
    output = fg(13)+path_file+': '
    output += fg(26)+string[:index_point[0]]
    for i in range(0, len(index_point)):
        output += attr('bold')+fg('red')
        start = True
        offset = len(string) if i == len(index_point)-1 else index_point[i+1]
        for j in range(index_point[i], offset):
            if string[j] in ['}','.',' ','\n','`',"'",'=',',','"',')'] and start:
                output += attr('reset')+fg(26)+string[j]
                start = False
            else:
                output += string[j]
    return output+attr('reset')


def recursive_folder(folder='.', include_ext=[], exclude_ext=[]):
    if not os.path.isdir(folder):
        exit(f'{folder} is not folder')
    list_file = []
    for root, subdirs, files in os.walk(folder):
        subdirs.sort()
        if files:
            files.sort()
            for file_name in files:
                ext = os.path.splitext(file_name)[-1].strip('.')
                if (ext in include_ext) and exclude_ext \
                or not include_ext or (ext not in exclude_ext):
                    list_file.append(os.path.join(root,file_name))
    return list_file


def find_sqli(folder='.', include_ext=[], exclude_ext=[]):
    global DEBUG
    print(DEBUG)
    list_file = recursive_folder(folder, include_ext, exclude_ext)
    for path_file in list_file:
        if not os.path.isfile(path_file):
            continue
        
        pattern = r'''\([\s\n'"]+select[\w\s\n\(\)\{\}\[\]\$\*\.\->_`'"=%]+from[\s\n]+[\w\s\n\(\)\{\}\[\]\$\*\.\->_`'"=%]+'''
        # pattern = r'''(\([\s\n'"](select)([^;]*\n)+)'''

        # Remove any query like:
        # SELECT * FROM table WHERE id='{$user_input}'
        before = [
            r''''{[\n\s'\"]*''',
            r'intval\([\n\s]*'
        ]

        # Remove any query like:
        # SELECT * FROM table WHERE id='$wpdb->id'
        after = [
            'wpdb'
        ]
        
        with open(path_file, 'r') as fp:
            try:
                data = fp.read()
                match = re.findall(pattern, data, flags=re.IGNORECASE)
                if match:
                    match = list(set(match))
                    for query in match:
                        index_dollar = []
                        index_from = query.lower().find('from')
                        if (index_from > -1):
                            for i in range(index_from, len(query)):
                                if query[i] == '$':
                                    check_befor = True
                                    check_after = True
                                    # Check before dollar
                                    for p in before:
                                        p += '$'
                                        if re.search(p, query[index_from:i]):
                                            check_befor = False
                                            break
                                    # Check after dollar
                                    for p in after:
                                        p = '\$'+p
                                        if re.search(p, query[i:]):
                                            check_after = False
                                            break
                                    if check_befor and check_after:
                                        index_dollar.append(i)
                            if index_dollar:
                                result.append([path_file, query, index_dollar])
            except Exception as e:
                if DEBUG:
                    exception_type, exception_object, exception_traceback = sys.exc_info()
                    filename = exception_traceback.tb_frame.f_code.co_filename
                    line_number = exception_traceback.tb_lineno
                    print("Exception type: ", exception_type)
                    print("File name: ", filename)
                    print("Line number: ", line_number)
                    print(e)
                pass

def main():
    global DEBUG
    
    args = init_argument()
    include_ext = args.e.split(',') if args.e else []
    exclude_ext = args.ne.split(',') if args.ne else []
    DEBUG = True if args.debug.lower() == 'true' else False
    
    find_sqli(args.d, include_ext, exclude_ext)
    fp = open(args.o, 'w')
    fp1 = open('./sqli_out_color.txt', 'w')
    for r in result:
        # print(f'Origin query: {r[1]}')
        out_color = output_color(r[0], r[1], r[2])
        fp.writelines(r[0]+': '+r[1]+'\n')
        fp1.writelines(out_color+'\n')
        print(out_color)
    print()
    print(fg(33)+bg('red')+attr('bold')+f'Find Vulnerability:{attr("reset")+fg("yellow")} {len(result)}'+attr('reset'))
    print(fg(33)+f'Output raw: {fg("yellow")}./sqli_out_raw.txt')
    print(fg(33)+f'Output color: {fg("yellow")}./sqli_out_color.txt')

if __name__ == '__main__':
    main()
